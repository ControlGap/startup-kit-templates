---
AWSTemplateFormatVersion: 2010-09-09

# A CloudFormation template to deploy an additional service to Fargate. This requires an existing
# cluster deployed by fargate.cfn.yml.

Description: SASKV5N Fargate Service

Parameters:
  NetworkStackName:
    Type: String
    Description: Name of an active Startup Kit CloudFormation stack that contains networking resources
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  ContainerName:
    Type: String
    Description: Name of default container name
    MinLength: 2
    MaxLength: 25
    Default: dsw
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  DatabaseStackName:
    Type: String
    Description: Name of an optional active Startup Kit CloudFormation stack that contains database resources
    Default: ""

  FargateStackName:
    Type: String
    Description: Name of an active Startup Kit CloudFormation stack that contains Fargate resources
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  EnvironmentName:
    Type: String
    Description: Environment name - dev or prod
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    ConstraintDescription: Specify either dev or prod

  RegisterServiceWithAlb:
    Default: true
    Type: String
    Description: Set to false to disable registering with the ALB (e.g., backend services without a web interface)
    ConstraintDescription: Only true or false are allowed
    AllowedValues:
      - true
      - false

  AppProtocol:
    Type: String
    Description: The application server protocol
    Default: HTTP
    AllowedValues:
      - HTTP
      - HTTPS
    ConstraintDescription: Specify either HTTTP or HTTPS

  ServiceUrlPath:
    Type: String
    Description: The optional URL path for the service (e.g., /test). Either an URL path or hostname is required if you register with an ALB
    Default: ""

  HostedZoneName:
    Type: String
    Description: The Amazon Route 53 Hosted Zone Name for the optional load balancer alias record for the service - do not include a period at the end
    Default: ""
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)" # Allow for a blank or a domain name
    ConstraintDescription: Please enter a valid Route 53 Hosted Zone Name

  ServiceHostname:
    Type: String
    Description: The optional URL path for the service (e.g., foo.bar.com). Either an URL path or hostname is required if you register with an ALB
    Default: ""

  ServiceLBListenerPriority:
    Type: Number
    Description: The service load balancer listener priority - must be unique for each service if ALB is enabled
    Default: 2
    MinValue: 2
    MaxValue: 50000
    ConstraintDescription: Number must be between 1 and 50,000

  HealthCheckPath:
    Type: String
    Description: The path for the Application Load Balancer health check
    Default: /
    MinLength: 1
    MaxLength: 255
    ConstraintDescription: Value must be between 1 and 255 characters

  SeedDockerImage:
    Type: String
    Default: registry.hub.docker.com/library/nginx:1.13
    Description: Initial image before CodePipeline is executed. Existing application images in ECR should override this parameter

  ContainerCpu:
    Type: Number
    Description: "Amount of CPU for the container - options available: https://aws.amazon.com/fargate/pricing/"
    Default: 256
    MinValue: 256
    MaxValue: 4096
    ConstraintDescription: "Value must be between 256 and 4096 - see: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_size"

  ContainerMemory:
    Type: Number
    Description: "Amount of memory for the container - options available: https://aws.amazon.com/fargate/pricing/"
    Default: 512
    MinValue: 512
    MaxValue: 30720
    ConstraintDescription: "Value must be between 512 and 30720 - see: https://aws.amazon.com/fargate/pricing/"

  # CPU alarm parameters
  CpuAlarmEvaluationPeriods:
    Description: The number of periods over which data is compared to the specified threshold
    Type: Number
    Default: 2
    MinValue: 2

  CpuScaleOutThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling out
    Default: 50
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100

  CpuScaleInThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling in
    Default: 25
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be between 0 and 100

  # Auto scaling container counts
  TaskMinContainerCount:
    Type: Number
    Description: Minimum number of containers to run for the service
    Default: 1
    MinValue: 1
    ConstraintDescription: Value must be at least one

  TaskMaxContainerCount:
    Type: Number
    Description: Maximum number of containers to run for the service when auto scaling out
    Default: 2
    MinValue: 1
    ConstraintDescription: Value must be at least one

  ContainerLogRetentionInDays:
    Type: Number
    Default: 7

  MaxTaggedContainerImagesToRetain:
    Type: Number
    Description: The number of tagged container images to retain before expiring
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: Value must be between 1 and 100
    Default: 20

  DaysToRetainUntaggedContainerImages:
    Type: Number
    Description: The number days to retain untagged container images before expiring
    MinValue: 1
    MaxValue: 100
    ConstraintDescription: Value must be between 1 and 100
    Default: 7

Conditions:
  IsDbStackSet: !Not [!Equals [!Ref DatabaseStackName, ""]]

  AddServiceToAlb: !Equals [!Ref RegisterServiceWithAlb, true]

  CreateRoute53Record: !And
    - !Not [!Equals [!Ref ServiceHostname, ""]]
    - !Not [!Equals [!Ref HostedZoneName, ""]]
    - Condition: AddServiceToAlb

  IsUrlPathRouting: !And
    - !Not [!Equals [!Ref ServiceUrlPath, ""]]
    - Condition: AddServiceToAlb

  DoNotAddServiceToAlb: !Equals [!Ref RegisterServiceWithAlb, false]

Resources:
  # Simple Amazon ECR Lifecycle Policies to try and reduce storage costs
  # See: https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
  EcrDockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      LifecyclePolicy:
        LifecyclePolicyText: !Sub
          - |
            {
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "Only keep untagged images for ${DaysToRetainUntaggedContainerImages} days",
                  "selection": {
                    "tagStatus": "untagged",
                    "countType": "sinceImagePushed",
                    "countUnit": "days",
                    "countNumber": ${DaysToRetainUntaggedContainerImages}
                  },
                  "action": { "type": "expire" }
                },
                {
                  "rulePriority": 2,
                  "description": "Keep only ${MaxTaggedContainerImagesToRetain} tagged images, expire all others",
                  "selection": {
                    "tagStatus": "tagged",
                    "tagPrefixList": [ "${EnvironmentName}" ],
                    "countType": "imageCountMoreThan",
                    "countNumber": ${MaxTaggedContainerImagesToRetain}
                  },
                  "action": { "type": "expire" }
                }
              ]
            }
          - DaysToRetainUntaggedContainerImages: !Ref DaysToRetainUntaggedContainerImages
            MaxTaggedContainerImagesToRetain: !Ref MaxTaggedContainerImagesToRetain
            EnvironmentName: !Ref EnvironmentName

    # The namespace in Amazon CloudWatch Logs - see https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatchLogsConcepts.html
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /fargate/${AWS::StackName}/${ContainerName}/${EnvironmentName}
      RetentionInDays: !Ref ContainerLogRetentionInDays

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: !Ref SeedDockerImage
          Essential: true
          PortMappings:
            - ContainerPort:
                Fn::ImportValue: !Sub ${NetworkStackName}-AppIngressPort

          # Environment variables can be customized by adding parameters/values below. Secrets
          # should be stored in AWS Systems Manager Parameter Store.
          # See: https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-paramstore.html
          Environment:
            - Name: ENVIRONMENT_NAME
              Value: !Ref EnvironmentName
            - Name: DATABASE_ENDPOINT
              Value:
                !If [
                  IsDbStackSet,
                  "Fn::ImportValue": !Sub "${DatabaseStackName}-DatabaseURL",
                  "",
                ]
            - Name: DATABASE_USER
              Value:
                !If [
                  IsDbStackSet,
                  "Fn::ImportValue": !Sub "${DatabaseStackName}-DatabaseUser",
                  "",
                ]
            - Name: LOAD_BALANCER_DNS
              Value:
                Fn::ImportValue: !Sub ${FargateStackName}-ApplicationLoadBalancerDnsName
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref ContainerName
    DependsOn:
      - LogGroup
      - TaskExecutionRole

  ServiceWithoutAlb:
    Type: AWS::ECS::Service
    Condition: DoNotAddServiceToAlb
    Properties:
      Cluster:
        Fn::ImportValue: !Sub ${FargateStackName}-FargateEcsClusterName
      ServiceName: !Ref AWS::StackName
      DesiredCount: !Ref TaskMinContainerCount
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet1ID
            - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet2ID
    DependsOn:
      - TaskDefinition

  ServiceWithAlb:
    Type: AWS::ECS::Service
    Condition: AddServiceToAlb
    Properties:
      Cluster:
        Fn::ImportValue: !Sub ${FargateStackName}-FargateEcsClusterName
      ServiceName: !Ref AWS::StackName
      DesiredCount: !Ref TaskMinContainerCount
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ContainerName
          ContainerPort:
            Fn::ImportValue: !Sub ${NetworkStackName}-AppIngressPort
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub ${NetworkStackName}-AppSecurityGroupID
          Subnets:
            - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet1ID
            - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnet2ID
    DependsOn:
      - TaskDefinition

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: "*"

  ScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref TaskMinContainerCount
      MaxCapacity: !Ref TaskMaxContainerCount
      ResourceId: !Sub
        - service/${EcsClusterName}/${ServiceName}
        - EcsClusterName:
            Fn::ImportValue: !Sub ${FargateStackName}-FargateEcsClusterName
          ServiceName:
            !If [
              AddServiceToAlb,
              !GetAtt ServiceWithAlb.Name,
              !GetAtt ServiceWithoutAlb.Name,
            ]
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
      - AutoScalingRole

  ScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0
    DependsOn: ScalingTarget

  ScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: -1
            MetricIntervalUpperBound: 0
    DependsOn: ScalingTarget

  ScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: !Ref CpuAlarmEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref CpuScaleOutThreshold
      AlarmDescription: Alarm to add capacity if CPU is high
      Period: 60
      AlarmActions:
        - !Ref ScaleOutPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Sub ${FargateStackName}-FargateEcsClusterName
        - Name: ServiceName
          Value:
            !If [
              AddServiceToAlb,
              !GetAtt ServiceWithAlb.Name,
              !GetAtt ServiceWithoutAlb.Name,
            ]
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization
    DependsOn:
      - ScaleOutPolicy

  ScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: !Ref CpuAlarmEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref CpuScaleInThreshold
      AlarmDescription: Alarm to reduce capacity if container CPU is low
      Period: 300
      AlarmActions:
        - !Ref ScaleInPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value:
            Fn::ImportValue: !Sub ${FargateStackName}-FargateEcsClusterName
        - Name: ServiceName
          Value:
            !If [
              AddServiceToAlb,
              !GetAtt ServiceWithAlb.Name,
              !GetAtt ServiceWithoutAlb.Name,
            ]
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization
    DependsOn:
      - ScaleInPolicy

  ServiceRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: CreateRoute53Record
    Properties:
      Name: !Ref ServiceHostname
      HostedZoneName: !Sub ${HostedZoneName}.
      Type: A
      AliasTarget:
        HostedZoneId:
          Fn::ImportValue: !Sub ${FargateStackName}-ApplicationLoadBalancerCanonicalHostedZoneId
        DNSName:
          Fn::ImportValue: !Sub ${FargateStackName}-ApplicationLoadBalancerBaseDnsName

  # The health checks can be further tuned if your requirements differ
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: AddServiceToAlb
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcID
      Port:
        Fn::ImportValue: !Sub ${NetworkStackName}-AppIngressPort
      Protocol: !Ref AppProtocol
      Matcher:
        HttpCode: 200
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: !Ref AppProtocol
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      TargetType: ip
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref EnvironmentName

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: AddServiceToAlb
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub ${FargateStackName}-ApplicationLoadBalancerListenerArn
      Priority: !Ref ServiceLBListenerPriority
      Conditions:
        - Field: !If [IsUrlPathRouting, path-pattern, host-header]
          Values:
            - !If [IsUrlPathRouting, !Ref ServiceUrlPath, !Ref ServiceHostname]
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
    DependsOn:
      - TargetGroup

Outputs:
  Name:
    Description: Fargate Service Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name

  EnvironmentName:
    Description: Environment Name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub ${AWS::StackName}-EnvironmentName

  EcrDockerRepositoryName:
    Value: !Ref EcrDockerRepository
    Export:
      Name: !Sub ${AWS::StackName}-EcrDockerRepositoryName

  EcrDockerRepositoryArn:
    Value: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepository}
    Export:
      Name: !Sub ${AWS::StackName}-EcrDockerRepositoryArn

  EcrDockerRepositoryUri:
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
    Export:
      Name: !Sub ${AWS::StackName}-EcrDockerRepositoryUri

  ServiceArn:
    Value: !If [AddServiceToAlb, !Ref ServiceWithAlb, !Ref ServiceWithoutAlb]
    Export:
      Name: !Sub ${AWS::StackName}-ServiceArn

  ServiceName:
    Value:
      !If [
        AddServiceToAlb,
        !GetAtt ServiceWithAlb.Name,
        !GetAtt ServiceWithoutAlb.Name,
      ]
    Export:
      Name: !Sub ${AWS::StackName}-ServiceName
